language: python

dist: bionic

git:
  depth: 1000

env:
  global:
    - PANDAS=pandas
    - COVERAGE=true
    - SKIP=""
    - DOCTR_PUSH_TYPE=""
    - XARRAY=
    - OPENBLAS=0
    - USE_PYPI=false
    - PYTHONHASHSEED=0
    - MKL_NUM_THREADS=1
    - OPENBLAS_NUM_THREADS=1
    - OMP_NUM_THREADS=1
    - PIP_PACKAGES=
    - TEST_INSTALL=false
    - PIP_PRE=false
    - secure: "aCm98s/mNxRSoTEhpIgfvRKzzJKdDkm/9TufIvgWvnkeiyDQqZwoqRVDIikZ+v6mkFeu7dr7BBojyPXnhkhji+SkNFz5ArtEqahJTvIZhP2nWgktlQSWkaC2Q5GyCWPhdQag/ImYbM4RK1WvtIVcSL7GPL0jLTgFDXY6/Hdl0eQY7kfWtojxIZUJShxn9IPfXE3gGQeWHEOL7SkZ3+8KxBJAUzrdd9J32PiHWZb5BcUupTQcW29ajoco4q1fdL/xPu3GZnys8EClorHxnPptQWfGGlnoJ79Q6H7Jhw6BGIj2fDCG9qX4boEH2zvH8ZKlbuTvMeVcBiLxPE8BpRmx2drX2kDyUo5ywVwA0W/7zsZ2YUYEyHEYL+cr4WVFdoDpwwPKaHOTp8F4Q+lQgkvxZbSlO6dUEMLNxnltgujAAdiaRJKLd2CwA85RjqYGLkMzTqBgYhH+p+7wB6jK8EJgoqxU3k98LfaeqyhsPrdWsxVLleLVAvzhXpNilQfX4NBPf+DYsn9NeyXYzp85H9p+J8DGJMJ42kBdP1r/cz1Y44SrGZhlk1MhLhb+uX7kV7nnmcW87NYoGSr52S5vNVL9iSU980SzJ08wOZwxwkKXOqgEJtMqdHsEuqY9jSQ2m/xAdarpxBsDD+Pw2gPfar+R8Lcptep50pMPFMgddDWV2f4="

matrix:
  fast_finish: true
  include:
  - python: 3.7
    env:
    - PYTHON=3.7
    - USE_PYPI=true
    - XARRAY=0.14
    - NUMPY=1.17
    - DOCBUILD=true
    - PIP_PACKAGES="xxhash"
  - python: 3.8
    env:
    - PYTHON=3.8
    - USE_PYPI=true
    - XARRAY=0.16
    - PIP_PACKAGES="xxhash"
    - TEST_INSTALL=true
  - python: 3.6
    env:
    - PYTHON=3.6
    - NUMPY=1.16
    - SCIPY=1.2.2
    - PANDAS=0.24.2
    - STATSMODELS=0.9
  - python: 3.6
    env:
    - PYTHON=3.6
    - NUMPY=1.16
    - SCIPY=1.3.3
    - PANDAS=0.24.2
    - XARRAY=0.11
    - SKIP="--skip-slow --skip-smoke"
  - python: 3.6
    env:
    - PYTHON=3.6
    - NUMPY=1.17
    - SCIPY=1.4.1
    - PANDAS=1.0.5
    - XARRAY=0.15
    - STATSMODELS=0.11
    - PIP_PACKAGES="xxhash"
    - SKIP="--skip-slow --skip-smoke"
  - python: 3.7
    env:
    - PYTHON=3.7
    - NUMPY=1.18
    - SCIPY=1.3.3
    - PANDAS=0.25.3
    - XARRAY=0.12
    - OPENBLAS=1
  - python: 3.8
    env:
    - PIP_PRE=true
    - SKIP="--skip-slow --skip-smoke"

  allow_failures:
  - python: 3.8
    env:
    - PIP_PRE=true
    - SKIP="--skip-slow --skip-smoke"


before_install:
  - sudo apt-get install -y pandoc enchant
  - git fetch --tags
  - export REPO_DIR=$PWD
  - |
    if [[ ${USE_PYPI} = false ]]; then
      wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda3.sh -nv
      chmod +x miniconda3.sh
      ./miniconda3.sh -b
      export PATH=/home/travis/miniconda3/bin:$PATH
      conda config --set always_yes true
      conda update --all -q
    fi;
  # Install packages
  - |
    if [[ ${USE_PYPI} = true ]]; then
      source ci/install-from-pypi.sh
    else
      source ci/install-from-conda.sh
    fi;
  - source ci/install-common.sh
  - if [[ ${PIP_PRE} = true ]]; then source ci/install-prerelease.sh; fi
  - pip list

install:
  - python setup.py build
  - |
    if [[ ${TEST_INSTALL} = true ]]; then
       python setup.py bdist_wheel
       export WHEEL_FILE=$(ls -t -U dist/*.whl | grep -m 1 "linearmodels")
       echo $WHEEL_FILE
       pip install $WHEEL_FILE
    else
       pip install -e . --no-build-isolation -v
    fi

script:
  - flake8 linearmodels
  - black --check linearmodels
  - isort --check linearmodels
  - |
    if [[ ${TEST_INSTALL} = true ]]; then
      pytest linearmodels/tests/test_examples.py
      mkdir empty && cd empty
      echo python -c "import linearmodels;linearmodels.test(['-n','2','--skip-slow'])"
      python -c "import linearmodels;linearmodels.test(['-n','2','--skip-slow'])"
      ls
      cd ..
      ls
    else
      echo pytest -n 2 --cov-config .coveragerc --cov=linearmodels --durations=10 ${SKIP} linearmodels
      pytest -n 2 --cov-config .coveragerc --cov=linearmodels --durations=10 ${SKIP} linearmodels
    fi
  - set -e
  - |
    if [[ ${DOCBUILD} = true ]]; then
      sudo apt-get install -y enchant
      pip install sphinxcontrib-spelling sphinx-material
      pip list
      cd doc
      make html
      make html
      make spelling
      cd ..
      doctr deploy devel --build-tags
      if [[ -z ${TRAVIS_TAG} ]]; then
        echo "Not a tagged build."
      else
        doctr deploy . --build-tags
      fi
    fi

after_success:
  - if [ ${COVERAGE} = true ]; then codecov; fi
